print("""/    

 _______  _______  _______ _________ _______ 
(  ___  )(  ____ \(  ____ \\__   __/(  ____ \
| (   ) || (    \/| (    \/   ) (   | (    \/
| (___) || (__    | |         | |   | (_____ 
|  ___  ||  __)   | | ____    | |   (_____  )
| (   ) || (      | | \_  )   | |         ) |
| )   ( || (____/\| (___) |___) (___/\____) |
|/     \|(_______/(_______)\_______/\_______)
                                             
                            """)



'''
THIS CODE SHOULD ONLY USED FOR EDUCATIONAL PURPOSES 

Do not attempt to violate the law with anything contained here.
If you planned to use the content for illegal purpose, then please leave this site immediately! 
We will not be responsible for your illegal actions. 
Neither administration of this Repository, the authors of this material, or anyone else affiliated in any way, is going to accept responsibility for your actions.

Released and Licensed under the MIT License
Written by Prasanna
For More Malware Project Sample Codes ,CHECK OUT https://github.com/Prasanna1717/MalwareTreasury

'''
#CODE EXPLANATION
'''
This Program contains functions for encrypting and decrypting files using the Fernet algorithm from the cryptography library.

The Fernet algorithm is a symmetric encryption algorithm, which means that it uses the same key for both encryption and decryption. The key is generated from a password provided by the user using the PBKDF2HMAC key derivation function. This function stretches the password using a salt value and a number of iterations to make it harder to crack the key through brute force or dictionary attacks.

The create_key() function generates a random salt value, creates a PBKDF2HMAC object using the password and salt, and then generates the key by deriving it from the password. The get_password() function prompts the user to enter their password, which is then passed to the create_key() function to generate the key.

The encrypt_file() function reads the contents of the file, generates a Fernet object using the key, and then uses the Fernet object to encrypt the file contents. It then writes the encrypted contents back to the file. The decrypt_file() function does the opposite, reading the encrypted contents of the file, generating a Fernet object using the key, and using the Fernet object to decrypt the contents. It then writes the decrypted contents back to the file.
'''

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from getpass import getpass

def create_key(password):
    # generate a salt for the PBKDF2 function
    salt = os.urandom(16)

    # create a PBKDF2HMAC object using the password and salt
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000
    )

    # generate the key from the password
    key = base64.urlsafe_b64encode(kdf.derive(password))
    return key

def get_password():
    # prompt the user to enter their password
    password = getpass("Enter your password: ")
    return password

def encrypt_file(file_name):
    # get the password from the user
    password = get_password()

    # generate the key from the password
    key = create_key(password)

    # read the file contents
    with open(file_name, 'rb') as f:
        file_contents = f.read()
    
    # generate a Fernet object using the key
    fernet = Fernet(key)
    
    # encrypt the file contents
    encrypted_contents = fernet.encrypt(file_contents)
    
    # write the encrypted contents back to the file
    with open(file_name, 'wb') as f:
        f.write(encrypted_contents)

def decrypt_file(file_name):
    # get the password from the user
    password = get_password()

    # generate the key from the password
    key = create_key(password)
    
    # read the encrypted file contents
    with open(file_name, 'rb') as f:
        encrypted_contents = f.read()
    
    # generate a Fernet object using the key
    fernet = Fernet(key)
    
    # decrypt the file contents
    decrypted_contents = fernet.decrypt(encrypted_contents)
    
    # write the decrypted contents back to the file
    with open(file_name, 'wb') as f:
        f.write(decrypted_contents)
'''
THANK YOU
'''
